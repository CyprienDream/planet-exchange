<!DOCTYPE html>
<html>
  <head>
    <title>Address Selection</title>
    <script>
    "use strict";

    function initMap() {
      // look for html address input and change its id
      document.getElementById('storage_address').id = 'location';

      const componentForm = [
        'location'
      ];

      // define map parameters
      const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 11,
        center: { lat: 37.4221, lng: -122.0841 },
        mapTypeControl: false,
        fullscreenControl: true,
        zoomControl: true,
        streetViewControl: true
      });
      const marker = new google.maps.Marker({map: map, draggable: false});

      //find address html inputs
      const autocompleteInput = document.getElementById('location');
      //make the element the target of autocomplete
      const autocomplete = new google.maps.places.Autocomplete(autocompleteInput, {
        fields: ["address_components", "geometry", "name"],
        types: ["address"],
      });
      autocomplete.addListener('place_changed', function () {
        marker.setVisible(false);
        const place = autocomplete.getPlace();
        if (!place.geometry) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert('No details available for input: \'' + place.name + '\'');
          return;
        }
        renderAddress(place);
        fillInAddress(place);
      });

      function fillInAddress(place) {  // optional parameter
        const addressNameFormat = {
          'street_number': 'short_name',
          'route': 'long_name',
          'locality': 'long_name',
          'administrative_area_level_1': 'short_name',
          'country': 'long_name',
          'postal_code': 'short_name',
        };
        const getAddressComp = function (type) {
          for (const component of place.address_components) {
            if (component.types[0] === type) {
              return component[addressNameFormat[type]];
            }
          }
          return '';
        };
        document.getElementById('location').value = getAddressComp('street_number') + ' '
                  + getAddressComp('route');
        for (const component of componentForm) {
          // Location field is handled separately above as it has different logic.
          if (component !== 'location') {
            document.getElementById(component).value = getAddressComp(component);
          }
        }
      }

      function renderAddress(place) {
        map.setCenter(place.geometry.location);
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);
      }
    }
    </script>
  </head>
  <body>
        <div class="container d-flex flex-column">
          <h2>Create a new storage room</h2>

          <div class="mt-4">
            <%= simple_form_for @storage do |f| %>
              <%= f.input :address,
                          placeholder: "Address",
                          html: { id: "location" } %>

          <div class="checkbox-holder storage" >
              <% @items.each do |item| %>
                      <div class="checkbox-item">
                          <%= check_box_tag("storage[item_ids][]", item.id, false, id:item.id) %>
                          <%= label_tag("storage_item_ids_#{item.id}", "#{item.name}") %>
                      </div>
              <% end %>
          </div>
          </div>
              <%= f.button :submit, "Create storage", class: "btn btn-white" %>
            <% end %>
          </div>
          </div>
        </div>
      <%# location autocomplete depends on the map %>
      <div class="map" id="map" style="display:none"></div>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDC9LZC67e3qFKLk8-RSOQPV0lmCHZ6i4s&libraries=places&callback=initMap&solution_channel=GMP_QB_addressselection_v1_cABC" async defer></script>
  </body>
</html>
